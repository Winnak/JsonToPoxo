"use strict";
function convertToX(text, x) {
    let json;
    try {
        json = JSON.parse(text);
    }
    catch (error) {
        console.error(error.message);
        return error;
    }
    return x(json);
}
function createDefaultCSharpOptions() {
    return {
        varNameConversion: s => pascalCase(sanitizeVariableName(s), false),
        indentation: "    ",
        useProperties: true,
        namespace: "YourNamespace",
        floatType: "double",
        jsonProperty: key => `[JsonProperty("${key}")]`
    };
}
function convertToCSharp(json, options) {
    if (options == undefined || options == null) {
        options = createDefaultCSharpOptions();
    }
    if (Array.isArray(json)) {
        if (json.length == 0) {
            return "Unable to determine type of empty array";
        }
        json = json[0];
    }
    const o = options;
    let result = "";
    let recursiveObjects = [
        ["Poxo", json]
    ];
    while (recursiveObjects.length > 0) {
        const element = recursiveObjects.pop();
        if (element == undefined) {
            break;
        }
        const [objName, objVal] = element;
        const entries = Object.entries(objVal);
        result += entries.reduce((acc, [key, val]) => {
            const varName = o.varNameConversion(key);
            const varType = getCSharpTypeString([key, val], o);
            if (varType[1] != null) {
                recursiveObjects.push(varType[1]);
            }
            const epilogue = o.useProperties ? "{ get; set; }" : ";";
            let prelude = `\n${o.indentation + o.indentation}public `;
            if (o.jsonProperty != null) {
                prelude = `\n\n${o.indentation + o.indentation}${o.jsonProperty(key)}` + prelude;
            }
            return acc + `${prelude}${varType[0]} ${varName} ${epilogue}`;
        }, `\n${o.indentation}public class ${objName}\n${o.indentation}{`) + `\n${o.indentation}}`;
    }
    return `//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a JsonToPoxo.
// </auto-generated>
//------------------------------------------------------------------------------
using Newtonsoft.Json;

namespace ${o.namespace}
{${result}
}`;
}
function getCSharpTypeString([varName, varType], options) {
    const type = typeof varType;
    switch (type) {
        case "string":
            return ["string", null];
        case "number":
            if (Number.isInteger(varType)) {
                return ["int", null];
            }
            return [options.floatType, null];
        case "bigint":
            return ["System.Numerics.BigInteger", null];
        case "boolean":
            return ["bool", null];
        case "object":
            if (varType == null) {
                return ["object /* unable to determine */", null];
            }
            if (Array.isArray(varType)) {
                if (varType.length > 0) {
                    const arrayType = getCSharpTypeString([varName, varType[0]], options);
                    return [arrayType[0] + "[]", arrayType[1]];
                }
                return ["object[]", null];
            }
            if (Object.entries(varType).length > 0) {
                const newType = options.varNameConversion(varName);
                return [newType, [newType, varType]];
            }
            return ["object", null];
        default:
        case "symbol":
        case "undefined":
            return ["object /* unknown type */", null];
        case "function":
            return ["object /* unable to convert function */", null];
    }
}
function sanitizeVariableName(varName) {
    varName = varName.replace(/(?![\x30-\x39\x41-\x5a\x61-\x7a])./gu, "_");
    if (varName.length == 0 || !isNaN(parseInt(varName[0], 10))) {
        return "v" + varName;
    }
    return varName;
}
function capitalize(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
function pascalCase(someString, capitalizeAbbreviations = false) {
    if (someString.match(/^[A-Z_0-9]+$/g)) {
        someString = someString.toLowerCase();
    }
    else if (!capitalizeAbbreviations) {
        someString = someString
            .replace(/([A-Z])([A-Z]+)([A-Z][a-z])/g, (_m, p1, p2, p3, _o, _s) => p1 + p2.toLowerCase() + p3)
            .replace(/([A-Z])([A-Z]+)/g, (_m, p1, p2, _o, _s) => p1 + p2.toLowerCase());
    }
    someString = someString.replace(/_+(.)|^([a-z])/g, (match, p1, p2, _o, _s) => p1 ? capitalize(p1) :
        p2 ? capitalize(p2) :
            match);
    return someString;
}
//# sourceMappingURL=app.js.map